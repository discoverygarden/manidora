<?php

/**
 * @file
 * Custom University of Manitoba hacks for Islandora.
 */

// Includes functions for blocks.
require_once dirname(__FILE__) . '/includes/blocks.inc';

/**
 * API call to insert a link to a printer friendly version of something.
 *
 * @param string $path
 *   path to page we want a printer friendly version of
 */
function manidora_print_insert_link($path) {
  return l(t("Printer Friendly Version"), $path);
}

/**
 * Implements hook_preprocess_print().
 *
 * Strips out unneccessary content and adds MODS metadata below the object.
 */
function manidora_preprocess_print(&$variables) {
  // Get the DOM.
  $content_dom = new DOMDocument();
  $content_dom->loadHTML($variables["print"]["content"]);

  //
  // Get just the content we want.
  // We're looking for the 'content' divs.
  //
  $divs = $content_dom->getElementsByTagName("div");
  $found = FALSE;
  for ($i = 0; $i < $divs->length && !$found; $i++) {
    if ($divs->item($i)->hasAttribute("class") &&
        ($divs->item($i)->getAttribute("class") == "islandora-basic-image-content" ||
        $divs->item($i)->getAttribute("class") == "islandora-large-image-content" ||
        $divs->item($i)->getAttribute("class") == "islandora-newspaper-content")
    ) {
      // Replace original content with just the stripped out 'content' div.
      $variables["print"]["content"] = $content_dom->saveHTML($divs->item($i));
      $found = TRUE;
    }
  }

  //
  // Append the MODS metadata to the end of the content.
  //
  if ($found) {
    // Hack out the PID from the URL.
    $url = $variables["print"]["url"];
    $explode_results = explode("/islandora/object/", $url);

    if (count($explode_results) > 1) {
      $pid = $explode_results[1];
    }
    else {
      $pid = $explode_results[0];
    }

    $pid = urldecode($pid);

    // Use the PID to get the Islandora object.
    $islandora_object = islandora_object_load($pid);

    // Append the MODS metadata list to the end of the content to be themed by
    // the printer friendly module.
    if ($islandora_object['MODS']) {
      $metadata = manidora_retrieve_metadata_form($islandora_object);
      $variables["print"]["content"] .= "<br/>" . drupal_render($metadata);
    }
  }
}

/**
 * Implements hook_menu().
 */
function manidora_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manitoba_metadata'] = array(
    'title' => 'Metadata',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'manidora_retrieve_metadata_form',
    'page arguments' => array(2),
    'access callback' => 'manidora_metadata_access',
    'access arguments' => array(2),
    'weight' => 1,
  );
  $items['islandora/object/%islandora_object/manitoba_download'] = array(
    'title' => 'Download',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'manidora_download_table',
    'page arguments' => array(2),
    'access callback' => 'manidora_download_access',
    'access arguments' => array(2),
    'weight' => 2,
  );
  $items['islandora/manitoba/newspaper_search'] = array(
    'title' => 'Manitoba Advanced Newspaper Search',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manidora_newspaper_search_form'),
    'access arguments' => array(FEDORA_VIEW_OBJECTS),
  );
  $items['admin/islandora/manidora'] = array(
    'title' => 'Manidora',
    'description' => 'Configure the UofM customization module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('manidora_admin'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/manitoba/pdf/print'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'manidora_printable_pdf',
    'page arguments' => array(4, NULL),
    'access arguments' => array(FEDORA_VIEW_OBJECTS),
  );
  $items['islandora/object/%islandora_object/manidora_download_clip'] = array(
    'page callback' => 'manidora_download_clip',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_object_access_callback',
    'access arguments' => array(FEDORA_VIEW_OBJECTS, 2),
    'load arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/manidora_download_clip_pdf'] = array(
    'page callback' => 'manidora_download_clip_pdf',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_object_access_callback',
    'access arguments' => array(FEDORA_VIEW_OBJECTS, 2),
    'load arguments' => array(2),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Do the ol' switcharooney on the menu entry for the islandora_fits
 * module so that UofM can continue their tabish lifestyles.
 */
function manidora_menu_alter(&$items) {
  if (module_exists('islandora_fits')) {
    $fits_tab = $items['islandora/object/%islandora_object/manage/fits_metadata'];
    $items['islandora/object/%islandora_object/fits_metadata'] = $fits_tab;
    $items['islandora/object/%islandora_object/fits_metadata']['weight'] = 3;
    $items['islandora/object/%islandora_object/fits_metadata']['access callback'] = 'manidora_technical_metadata_access';
    unset($items['islandora/object/%islandora_object/manage/fits_metadata']);
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * Add a link to view the content div in a colorbox.
 */
function manidora_block_view_alter(&$data, $block) {
  if ($block->delta == 'compound_navigation' && !empty($data['content']['#markup'])) {
    drupal_add_js(drupal_get_path('module', 'manidora') . '/js/manidora.js');
    $data['content']['#markup'] .= '<a class="manidora-colorbox" href="#content">' . t('Full Screen') . '</a>';
  }
}

/**
 * Fetches MODS metadata as form encoded markup.
 *
 * @param IslandoraObject $object
 *   The object you wish to retrive formatted metadata from
 */
function manidora_retrieve_metadata_form($object) {
  drupal_set_title(t("@label Metadata", array('@label' => $object->label)));
  $output = manidora_mods_transform($object);

  if ($output) {
    $form = array(
      '#type' => 'item',
      '#markup' => $output,
    );
  }
  else {
    drupal_set_message(t('A transformation error has occured!'), 'error');
  }
  return $form;
}

/**
 * Implements hook_access().
 */
function manidora_metadata_access($object) {
  if (!in_array('islandora:collectionCModel', $object->models) && $object['MODS']) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Overwrites the islandora_fits_access() function for use in Manidora.
 *
 * @param IslandoraObject $object
 *   An instansiated IslandoraObject.
 *
 * @return bool
 *   Access or not.
 */
function manidora_technical_metadata_access($object) {
  $allowed_models = array('islandora:sp_basic_image', 'islandora:sp_large_image_cmodel');

  if ($object[variable_get('islandora_fits_techmd_dsid', 'TECHMD')] && user_access('view technical metadata') && count(array_intersect($allowed_models, $object->models))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_access().
 * @TODO: Expand on the restriction?
 */
function manidora_download_access($object) {
  if (!in_array('islandora:collectionCModel', $object->models)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Utility function that runs an xslt on MODS metadata.
 *
 * The transform was straight jacked from U of M's D6 site.
 *
 * @param IslandoraObject $object
 *   The IslandoraObject whose MODS metadata you wish to transform.
 */
function manidora_mods_transform($object) {
  $mods_text = $object->repository->api->a->getDatastreamDissemination($object->id, 'MODS');

  if ($mods_text) {
    if (in_array('islandora:bookCModel', $object->models)) {
      $rows = array();
      $mods_xml = new SimpleXMLElement($mods_text);

      $mods_xml->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');

      // Title info.
      $title_results = $mods_xml->xpath('/mods:mods/mods:titleInfo/mods:title');
      $title = (string) reset($title_results);

      if (!empty($title)) {
        $rows[] = array('Field' => t('Title'), 'Value' => $title);
      }

      $subtitle_results = $mods_xml->xpath('/mods:mods/mods:titleInfo/mods:subTitle');
      $subtitle = (string) reset($subtitle_results);

      if (!empty($subtitle)) {
        $rows[] = array(t('Subtitle'), $subtitle);
      }

      $authors = array();

      // Authors.
      foreach ($mods_xml->name as $name_xml) {
        $name_parts = array();
        $role = (string) @$name_xml->role->roleTerm;
        if ($role) {
          if ($role == 'author') {
            foreach ($name_xml->namePart as $name_part) {
              if ((string) $name_part != '') {
                // Strip periods off the end.
                $np = (string) rtrim($name_part, '.');
                if ($name_part['type'] == 'given') {
                  $name_parts['first_name'] = (string) $name_part;
                }
                if ($name_part['type'] == 'family') {
                  $name_parts['last_name'] = $np;
                }
              }
            }
          }
          if (isset($names_parts['last_name']) && isset($name_parts['first_name'])) {
            $authors[] = $name_parts['first_name'] . ' ' . $name_parts['last_name'];
          }
        }
      }
      $author_markup = '';
      foreach ($authors as $author) {
        if (empty($author)) {
          $author_markup = $author;
        }
        else {
          $author_markup .= '<br/>' . $author;
        }
      }

      if (!empty($author_markup)) {
        $rows[] = array(t('Author'), $author_markup);
      }

      // Origin Info.
      $place_results = $mods_xml->xpath('/mods:mods/mods:originInfo/mods:place/mods:placeTerm');
      $place = (string) reset($place_results);

      if (!empty($place)) {
        $rows[] = array(t('Place'), $place);
      }

      $publisher_results = $mods_xml->xpath('/mods:mods/mods:originInfo/mods:publisher');
      $publisher = (string) reset($publisher_results);

      if (!empty($publisher)) {
        $rows[] = array(t('Publisher'), $publisher);
      }

      $date_results = $mods_xml->xpath('/mods:mods/mods:originInfo/mods:dateIssued');
      $date = (string) reset($date_results);

      if (!empty($date)) {
        $date_format = new DateTime($date);
        $rows[] = array(t('Date Issued'), date_format($date_format, 'Y-m-d'));
      }

      // Physical Description.
      $physical_results = $mods_xml->xpath('/mods:mods/mods:physicalDescription/mods:extent');
      $physical = (string) reset($physical_results);

      if (!empty($physical)) {
        $rows[] = array(t('Physical Description'), $physical);
      }

      // Record Info.
      $record_id_results = $mods_xml->xpath('/mods:mods/mods:recordInfo/mods:recordIdentifier');
      $record_id = (string) reset($record_id_results);

      if (!empty($record_id)) {
        $rows[] = array(t('Record ID'), $record_id);
      }

      $content_source_results = $mods_xml->xpath('/mods:mods/mods:recordInfo/mods:recordContentSource');
      $content_source = (string) reset($content_source_results);

      if (!empty($content_source)) {
        $rows[] = array(t('Content Source'), $content_source);
      }

      $language_results = $mods_xml->xpath('/mods:mods/mods:recordInfo/mods:languageofCataloging');
      $language = (string) reset($language_results);

      if (!empty($language)) {
        $rows[] = array(t('Language'), $language);
      }

      // Identifier.
      $identifier_results = $mods_xml->xpath('/mods:mods/mods:identifier');
      $identifier = (string) reset($identifier_results);

      if (!empty($identifier)) {
        $rows[] = array(t('Identifier'), $identifier);
      }

      // Table markup.
      $headers = array('Field' => t('Field'), 'Value' => t('Value'));
      $markup = theme_table(array(
                  'header' => $headers,
                  'rows' => $rows,
                  'attributes' => array(),
                  'caption' => '',
                  'colgroups' => array(),
                  'sticky' => TRUE,
                  'empty' => t('No MODS present!')));
      return $markup;
    }
    else {
      $xslt_processor = new XSLTProcessor();
      $xsl = new DOMDocument();
      $file = drupal_get_path('module', 'manidora') . '/xsl/manidora_mods2html.xsl';
      $xsl->load($file);
      $input = new DOMDocument();

      $did_load = $input->loadXML($mods_text);

      if ($did_load) {
        $xslt_processor->importStylesheet($xsl);
        $mods_transformed = $xslt_processor->transformToXml($input);
        return $mods_transformed;
      }
      else {
        return FALSE;
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Generates a table of all downloadable datastreams for an IslandoraObject.
 *
 * Used in the "Download" tab.
 *
 * @param IslandoraObject $islandora_object
 *   The object whose datastreams you wish to download.
 *
 * @return array
 *   Returns a table containing all the datastreams.
 */
function manidora_download_table($islandora_object) {
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');

  drupal_set_title(t("@label Downloads", array('@label' => $islandora_object->label)));

  $headers = array(
    'ID' => t('ID'),
    'label' => t('Label'),
    'mime' => t('Mime type'),
    'size' => t('Size'),
    'download' => t('Download'),
  );

  foreach ($islandora_object as $ds) {
    if ($ds->size > 0) {
      $rows[] = array(
        'ID' => l($ds->id, islandora_datastream_get_url($ds, 'view')),
        'label' => $ds->label,
        'mime' => $ds->mimeType,
        'size' => islandora_datastream_get_human_readable_size($ds),
        'download' => l(t('download'), islandora_datastream_get_url($ds, 'download')),
      );
    }
  }

  $table = array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  );
  return $table;
}

/**
 * Creates the custom search form for searching Manitoba's newspapers.
 *
 * @TODO: Limit searches based upon newspapers only.
 *
 * @param array $form
 *   The form to construct
 *
 * @param array $form_state
 *   Its state
 *
 * @return array
 *   The constructed form
 */
function manidora_newspaper_search_form($form, &$form_state) {
  $form = array(
    'exact_phrase' => array(
      '#type' => 'textfield',
      '#title' => t('With the exact phrase'),
    ),
    'least_one' => array(
      '#type' => 'textfield',
      '#title' => t('With at least one of the words'),
    ),
    'without_words' => array(
      '#type' => 'textfield',
      '#title' => t('Without all the words'),
    ),
    'all_words' => array(
      '#type' => 'textfield',
      '#title' => t('With all of the words'),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Search'),
      '#submit' => array('manidora_newspaper_search_form_submit'),
    ),
  );
  return $form;
}

/**
 * Submit handler for the manidora_newspaper_search_form.
 *
 * Redirects to the islandora/solr/search menupath to execute the
 * given query.
 *
 * @param array $form
 *   The form to submit
 * @param array $form_state
 *   Its state
 */
function manidora_newspaper_search_form_submit($form, &$form_state) {
  $query_string = '';

  if (strlen($form_state['values']['all_words']) > 0) {
    $all_words = $form_state['values']['all_words'];
    $all_array = explode(' ', $all_words);

    $count = 0;
    foreach ($all_array as $word) {
      if ($count == 0) {
        $query_string .= '(' . $word;
      }
      else {
        $query_string .= ' && ' . $word;
      }
      $count++;
    }
    $query_string .= ')';
  }

  if (strlen($form_state['values']['exact_phrase']) > 0) {
    $exact_phrase = $form_state['values']['exact_phrase'];
    $exact_phrase = '"' . $exact_phrase . '"';

    if (!strlen($query_string)) {
      $query_string .= '(' . $exact_phrase . ')';
    }
    else {
      $query_string .= ' && (' . $exact_phrase . ')';
    }
  }

  // "x" or field:"y" or field:"z"
  if (strlen($form_state['values']['least_one']) > 0) {
    $least_one = $form_state['values']['least_one'];
    $least_array = explode(' ', $least_one);
    $count = 0;
    if (strlen($query_string)) {
      $query_string .= ' && ';
    }
    foreach ($least_array as $word) {
      if ($count == 0) {
        $query_string .= '(' . $word;
      }
      else {
        $query_string .= ' || ' . $word;
      }
      $count++;
    }
    $query_string .= ')';
  }

  // Negative of "with all of the words"
  if (strlen($form_state['values']['without_words']) > 0) {
    $without_words = $form_state['values']['without_words'];
    $without_array = explode(' ', $without_words);
    $count = 0;
    if (strlen($query_string)) {
      $query_string .= ' && ';
    }
    foreach ($without_array as $word) {
      if ($count == 0) {
        $query_string .= '-(' . $word;
      }
      else {
        $query_string .= ' && ' . $word;
      }
      $count++;
    }
    $query_string .= ')';
  }
  $query_string = str_replace('/', '~slsh~', $query_string);
  $query = array('type' => 'edismax');
  drupal_goto('islandora/search/' . $query_string, array('query' => $query));
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 *
 * Links all collection results to solr results rather than directly to the
 * objects.
 */
function manidora_islandora_collectionCModel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  // We are using this strange hackish URL to get around a bug in the solr
  // module https://jira.duraspace.org/browse/ISLANDORA-840
  // UofM's collection field has been hacked to not be a URI.
  $search_results['object_url'] = 'islandora/search/';
  $search_results['object_url_params']['f[0]'] = variable_get('manidora_collection_solr_field', 'RELS_EXT_isMemberOfCollection_uri_ms')
      . ':"' . $search_results['solr_doc']['PID'] . '" OR RELS_EXT_isMemberOf_uri_ms:"info:fedora/' . $search_results['solr_doc']['PID'] . '"';
}

/**
 * Admin form definition.
 */
function manidora_admin($form, &$form_state) {
  $form = array();

  $form['manidora_collection_solr_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Collection Solr Field'),
    '#description' => t("Holds the collection Solr field."),
    '#default_value' => variable_get('manidora_collection_solr_field', 'RELS_EXT_isMemberOfCollection_uri_ms'),
    '#size' => 30,
  );

  return system_settings_form($form);
}

/**
 * Preprocessor for newspaper_page, removes some controls.
 */
function manidora_preprocess_islandora_newspaper_page_controls(&$variables) {
  unset($variables['controls']['jp2_download']);
  unset($variables['controls']['view']);
  unset($variables['controls']['pdf_download']);
}

/**
 * Constructs a printable PDF from the JPG datastream with header content.
 *
 * @param string $pid
 *   A PID representing a Fedora object.
 *
 * @return string
 *   Download link containing our created PDF.
 */
function manidora_printable_pdf($pid, $url = NULL) {
  @include_once 'sites/all/libraries/tcpdf/config/lang/eng.php';
  @include_once 'sites/all/libraries/tcpdf/tcpdf.php';

  // Extend the TCPDF class to create custom Header and Footer.
  class MYPDF extends TCPDF {

    /**
     * Constructor.
     */
    public function __construct($pid, $orientation = 'P', $unit = 'mm', $format = 'A4', $unicode = TRUE, $encoding = 'UTF-8', $diskcache = FALSE, $pdfa = FALSE) {
      $this->pid = $pid;
      parent::__construct($orientation, $unit, $format, $unicode, $encoding, $diskcache);
    }

    /**
     * Page header.
     */
    public function Header() {
      $string = manidora_retrieve_header_text($this->pid);
      if ($string) {
        $this->Cell(0, 15, $string, 0, FALSE, 'C', 0, '', 0, FALSE, 'M', 'M');
      }
    }

  }

  // Create new PDF document.
  $pdf = new MYPDF($pid, PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, TRUE, 'UTF-8', FALSE);

  $header_text = manidora_retrieve_header_text($pid);
  if ($header_text) {
    // Parse a bit for use below.
    $header_parts = explode(',', $header_text);
    $title = $header_parts[0];
  }
  else {
    $title = $pid;
    $header_text = $pid;
  }
  // Set document information.
  $pdf->SetTitle($title);
  $pdf->SetSubject($title);

  // Set default monospaced font.
  $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

  // Set margins.
  $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
  $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);

  // Set auto page breaks.
  $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

  // Set image scale factor.
  $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

  // Set some language-dependent strings.
  $pdf->setLanguageArray($l);

  // Set font.
  $pdf->SetFont('times', 'BI', 12);

  // Add a page.
  $pdf->AddPage();
  $url = isset($url) ? $url : variable_get('islandora_base_url', 'http://localhost:8080/fedora') . '/objects/' . $pid . '/datastreams/JPG/content';
  $pdf->Image($url, '0', '15', '', '', '', '', '', 2);

  // Close and output PDF document.
  $pdf->Output($header_text . '.pdf', 'D');
}

/**
 * Constructs the text used in the header of the PDF.
 *
 * @param string $pid
 *   A PID representing a Fedora object.
 *
 * @return string
 *   Formatted string for output display.
 */
function manidora_retrieve_header_text($pid) {
  $object = islandora_object_load($pid);
  if (isset($object['MODS'])) {
    $mods = $object['MODS']->content;
    $xml = new SimpleXMLElement($mods);

    $title = '';
    $date = '';
    $page = '';

    if (isset($xml->titleInfo)) {
      if (isset($xml->titleInfo->title)) {
        $title = (string) $xml->titleInfo->title;
        $title = preg_replace('/:(.*)/', '', $title);
      }
    }
    if (empty($title)) {
      $title = t('Unknown');
    }

    if (isset($xml->relatedItem)) {
      if (isset($xml->relatedItem->part)) {
        if (isset($xml->relatedItem->part->date)) {
          $date = $xml->relatedItem->part->date;
        }
        if (isset($xml->relatedItem->part->extent)) {
          if (isset($xml->relatedItem->part->extent->start)) {
            $page = $xml->relatedItem->part->extent->start;
          }
        }
      }
    }

    if (empty($date)) {
      $date = t('Unknown');
    }

    if (empty($page)) {
      $page = t('Unknown');
    }
    $text = $title . ', ' . $date . ' (Page ' . $page . ')';
    return $text;
  }
  else {
    return FALSE;
  }
}

/**
 * Gets the title of the object for display.
 *
 * Newspapers have specialized titles.
 *
 * @param FedoraObject $object
 *   The object from which to derive the title.
 */
function manidora_get_title(FedoraObject $object) {
  $models = $object->models;
  $retrieve_title = in_array('islandora:newspaperPageCModel', $models);
  return $retrieve_title ? manidora_retrieve_header_text($object->id) : $object->label;
}

/**
 * Gets the title to display for the given newspaper page or newspaper.
 */
function manidora_set_title(FedoraObject $object) {
  drupal_set_title(manidora_get_title($object));
}

/**
 * Implements hook_islandora_view_object().
 */
function manidora_islandora_view_object_alter(FedoraObject $object) {
  manidora_set_title($object);
}

/**
 * Implements hook_process_theme().
 */
function manidora_process_islandora_object_print(array &$variables) {
  drupal_add_css(drupal_get_path('module', 'manidora') . '/css/manidora.print.css');
  $object = $variables['object'];
  manidora_set_title($object);
  $clip = isset($variables['clip']) ? $variables['clip'] : NULL;
  $variables['content']['buttons'] = array(
    '#access' => isset($clip),
    '#prefix' => '<div>',
    '#suffix' => '</div></br>',
    'print' => array(
      '#prefix' => '<strong>',
      '#markup' => l(t('Print'), 'javascript:window.print();', array('external' => TRUE)),
      '#suffix' => '</strong>',
    ),
    '0' => array(
      '#markup' => ' | ',
    ),
    'download_clip' => array(
      '#prefix' => '<strong>',
      '#markup' => l(t('Download Image'), "islandora/object/{$object->id}/manidora_download_clip", array(
        'query' => array('clip' => $clip))),
      '#suffix' => '</strong>',
    ),
    '1' => array(
      '#markup' => ' | ',
    ),
    'download_pdf' => array(
      '#prefix' => '<strong>',
      '#markup' => l(t('Download PDF'), "islandora/object/{$object->id}/manidora_download_clip_pdf", array(
        'query' => array('clip' => $clip))),
      '#suffix' => '</strong>',
    ),
  );
}

/**
 * Menu callback downloads the given clip.
 */
function manidora_download_clip(FedoraObject $object) {
  if (isset($_GET['clip'])) {
    $is_https = isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';
    $http_protocol = $is_https ? 'https' : 'http';
    $url = $http_protocol . '://' . $_SERVER['HTTP_HOST'] . $_GET['clip'];
    $filename = manidora_get_title($object);
    header("Content-Disposition: attachment; filename=\"{$filename}.jpg\"");
    header("Content-type: image/jpeg");
    header("Content-Transfer-Encoding: binary");
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_URL, $url);
    $response = curl_exec($ch);
    curl_close($ch);
  }
  exit();
}

/**
 * Menu callback downloads the given clip.
 */
function manidora_download_clip_pdf(FedoraObject $object) {
  if (isset($_GET['clip'])) {
    $is_https = isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';
    $http_protocol = $is_https ? 'https' : 'http';
    $url = $http_protocol . '://' . $_SERVER['HTTP_HOST'] . $_GET['clip'];
    manidora_printable_pdf($object->id, $url);
  }
  exit();
}

/**
 * Alter the image upload forms, to allow a flag to be set for OCR.
 */
function manidora_form_alter(&$form, &$form_state, $form_id) {
  $forms_to_modify = array(
    'islandora_basic_image_image_upload_form',
    'islandora_large_image_image_upload_form',
  );
  if (in_array($form_id, $forms_to_modify) && module_exists('islandora_ocr')) {
    // XXX: Weighted form elements would be preferable to slicing... anyway.
    $original_form = $form;
    $form = array_slice($original_form, 0, -2);
    $form += array(
      'ocr_checkbox' => array(
        '#type' => 'checkbox',
        '#title' => t('OCR image'),
        '#description' => t('Flag the image to be run through OCR during the ingest process.'),
      ),
    );
    $form += array_slice($original_form, -2);

    array_unshift($form['next']['#submit'], 'manidora_ocr_flag_submit');
  }
}

/**
 * Submit handler; add RELS-EXT statement if we should OCR an image.
 */
function manidora_ocr_flag_submit($form, &$form_state) {
  if ($form_state['values']['ocr_checkbox']) {
    $object = reset($form_state['islandora']['objects']);
    $object->relationships->add(ISLANDORA_RELS_EXT_URI, 'doImageOCR', 'true', 1);
  }
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_alter().
 */
function manidora_islandora_datastream_ingested($object, $datastream) {
  $image_content_models = array(
    'islandora:sp_large_image_cmodel',
    'islandora:sp_basic_image',
  );
  if ($datastream->id == 'OBJ' && array_intersect($object->models, $image_content_models)) {
    // We are changing an image...
    if ($object->relationships->get(ISLANDORA_RELS_EXT_URI, 'doImageOCR', 'true', 1)) {
      // We have our flag set, let's go!
      module_load_include('inc', 'islandora_ocr', 'includes/derivatives');
      islandora_ocr_derive_datastreams($datastream, array());
    }
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 *
 * Puts the Solr query terms into the object URL so that viewers can use them
 * for highlighting.
 */
function manidora_islandora_sp_large_image_cmodel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $search_results['object_url_params']['solr'] = array(
    'query' => $query_processor->solrQuery,
    'params' => $query_processor->solrParams,
  );
}

/**
 * Implements hook_islandora_solr_query().
 */
function manidora_islandora_solr_query($islandora_solr_query) {
  module_load_include('inc', 'manidora', 'includes/utilities');
  if (!isset($_GET['cp'])) {
    return;
  }
  $collection_pid = $_GET['cp'];
  $collection_pids = manidora_get_descendant_collections($collection_pid);
  $current_pid = array_shift($collection_pids);
  $pid_string = '"' . $current_pid . '"';
  $pid_string2 = '"info:fedora/' . $current_pid . '"';
  if (!empty($collection_pids)) {
    foreach ($collection_pids as $collection_pid) {
      $pid_string .= ' OR "' . $collection_pid . '"';
      $pid_string2 .= ' OR "info:fedora/' . $collection_pid . '"';
    }
  }
  $hidden_filter = "RELS_EXT_isMemberOfCollection_uri_ms:($pid_string)";
  $hidden_filter .= " OR RELS_EXT_isMemberOf_uri_ms:($pid_string2)";
  $islandora_solr_query->solrParams['fq'][] = $hidden_filter;

}

/**
 * Implements hook_preprocess_page().
 */
function manidora_preprocess_page(&$variables) {
  $arg1 = arg(1);
  $arg2 = arg(2);
  if ($arg1 == 'object' && islandora_is_valid_pid($arg2)) {
    
    // get compound children
    $children = islandora_compound_object_get_parts($arg2);
    $pid = (!empty($children)) ? $children[0] : $arg2;

    if ($object = islandora_object_load($pid)) {
      $rels_predicate = variable_get('islandora_compound_object_relationship', 'isPartOf');
      $part_of = $object->relationships->get('info:fedora/fedora-system:def/relations-external#', $rels_predicate);
      // This object is part of a compound object
      if (!empty($part_of)) {
        $variables['title'] = '';
      }
    }
  }
}
